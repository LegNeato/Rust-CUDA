name: Rust CI

on:
  push:
    paths-ignore:
      - "**.md"
  pull_request:
    paths-ignore:
      - "**.md"
  pull_request_target:
    types: [labeled]
    paths-ignore:
      - "**.md"

env:
  RUST_LOG: info
  RUST_BACKTRACE: 1

jobs:
  build-and-check:
    name: Build & check ${{ matrix.os }} with CUDA ${{ matrix.cuda }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            cuda: "11.2.2"
            gpu: "T4"
            linux-local-args: ["--toolkit"]
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            cuda: "12.8.1"
            gpu: "T4"
            linux-local-args: ["--toolkit"]
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            cuda: "11.2.2"
            linux-local-args: []
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            cuda: "12.8.1"
            linux-local-args: []
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Run common steps
        uses: ./.github/actions/common-steps
        with:
          matrix_os: ${{ matrix.os }}
          matrix_cuda: ${{ matrix.cuda }}
          matrix_target: ${{ matrix.target }}
          matrix_gpu: ${{ matrix.gpu }}
          matrix_linux_local_args: ${{ matrix.linux-local-args }}

  integration-tests:
    name: Integration tests (after manual review) on ${{ matrix.os }} with CUDA ${{ matrix.cuda }}
    runs-on: ${{ matrix.os }}
    if: runner.os == 'Linux' && ( github.event_name == 'push' || (github.event_name == 'pull_request_target' && contains(github.event.pull_request.labels.*.name, 'DANGER-expose-secrets-and-run-tests')) )
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            cuda: "11.2.2"
            gpu: "T4"
            linux-local-args: ["--toolkit"]
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            cuda: "12.8.1"
            gpu: "T4"
            linux-local-args: ["--toolkit"]
    env:
      RUNNER_OS_NAME: ${{ matrix.os }}
      RUNNER_CUDA_VERSION: ${{ matrix.cuda }}
      MODAL_GPU_TYPE: ${{ matrix.gpu }}
      MODAL_TOKEN_ID: ${{ secrets.MODAL_TOKEN_ID }}
      MODAL_TOKEN_SECRET: ${{ secrets.MODAL_TOKEN_SECRET }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: "${{ github.event_name == 'pull_request_target' ? github.event.pull_request.head.sha : github.ref }}"

      - name: Run common steps
        uses: ./.github/actions/common-steps
        with:
          matrix_os: ${{ matrix.os }}
          matrix_cuda: ${{ matrix.cuda }}
          matrix_target: ${{ matrix.target }}
          matrix_gpu: ${{ matrix.gpu }}
          matrix_linux_local_args: ${{ matrix.linux-local-args }}

      - name: Install python (for CI test runner script)
        if: runner.os == 'Linux'
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install CI test runner deps
        if: runner.os == 'Linux'
        working-directory: .ci/modal.com
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          uv sync

      - name: Check CI test runner formatting
        if: runner.os == 'Linux'
        working-directory: .ci/modal.com
        run: uvx black --check .

      - name: Run tests on the GPU
        if: runner.os == 'Linux'
        env:
          RUNNER_OS_NAME: ${{ matrix.os }}
          RUNNER_CUDA_VERSION: ${{ matrix.cuda }}
          MODAL_GPU_TYPE: ${{ matrix.gpu }}
          MODAL_TOKEN_ID: ${{ secrets.MODAL_TOKEN_ID }}
          MODAL_TOKEN_SECRET: ${{ secrets.MODAL_TOKEN_SECRET }}
        run: |
          export PATH="$PATH:$GITHUB_WORKSPACE/.ci"
          cargo --config .ci/config.toml test --workspace --exclude "optix" --exclude "path_tracer" --exclude "denoiser" --exclude "add" --exclude "ex*" --exclude "cudnn"
